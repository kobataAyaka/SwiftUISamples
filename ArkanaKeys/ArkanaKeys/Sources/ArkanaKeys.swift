// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x71, 0x81, 0x1d, 0xdb, 0x3, 0x25, 0x47, 0x23, 0x36, 0xb0, 0x95, 0xef, 0x92, 0xa9, 0x2a, 0x1c, 0x3e, 0x4a, 0x3e, 0xa3, 0x27, 0x61, 0x70, 0x5f, 0x1, 0x23, 0x30, 0x4b, 0x76, 0xaa, 0xe3, 0x20, 0xeb, 0x79, 0x91, 0x42, 0x75, 0x95, 0x90, 0x1f, 0xb0, 0xa5, 0x28, 0x1e, 0xf8, 0x33, 0x2b, 0xf6, 0x3e, 0x13, 0xfe, 0x53, 0x8c, 0x5a, 0x75, 0x54, 0x92, 0x69, 0xd5, 0xab, 0xc0, 0x4a, 0x3a, 0x42
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let mySecretAPIKey: String = {
            let encoded: [UInt8] = [
                0x1f, 0xf5, 0x73, 0x84, 0x36, 0x15, 0x7f, 0x16, 0x5, 0x81, 0xa7, 0xdb, 0xa7, 0x9e, 0x12, 0x7d, 0x46, 0x5, 0x7f, 0xe7, 0x64, 0x2b, 0x27, 0x19, 0x62, 0x48, 0x64, 0x2, 0x34, 0xf8, 0xa9, 0x70, 0xb1, 0x14, 0xf4, 0xb, 0x25, 0xd9, 0xa1, 0x28, 0xc7, 0x93, 0x5a, 0x4b, 0xb3, 0x7a, 0x7f, 0xce, 0x71, 0x63
            ]
            return ArkanaKeys.decode(encoded: encoded, cipher: ArkanaKeys.salt)
        }()
    }
}

